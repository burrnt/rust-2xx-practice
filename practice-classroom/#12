use rand::Rng;

fn gen_random_vector(n: usize) -> Vec<i32> {
    let mut rng = rand::thread_rng();
    (0..n).map(|_| rng.gen_range(10..=99)).collect()
}

fn min_adjacent_sum(data: &[i32]) -> (i32, usize, usize) {
    let mut min_sum = i32::MAX;
    let mut min_index = 0;

    for i in 0..data.len() - 1 {
        let sum = data[i] + data[i + 1];
        if sum < min_sum {
            min_sum = sum;
            min_index = i;
        }
    }

    (min_sum, min_index, min_index + 1)
}

fn main() {
    let data = gen_random_vector(20);

    // Виводимо індекси
    print!("indexes: ");
    for i in 0..data.len() {
        print!("{:>3}. ", i);
    }
    println!();

    // Виводимо самі дані
    print!("data:    ");
    for num in &data {
        print!("{:>3}, ", num);
    }
    println!();

    // Знаходимо мінімальну пару
    let (min_sum, i, j) = min_adjacent_sum(&data);

    // Виводимо індекси мінімальної пари
    print!("indexes: ");
    for k in 0..data.len() {
        if k == i {
            print!("\\__ ");
        } else if k == j {
            print!("__/ ");
        } else {
            print!("     ");
        }
    }
    println!();

    // Виводимо результат
    println!(
        "min adjacent sum={}+{}={} at indexes:{},{}",
        data[i], data[j], min_sum, i, j
    );
}
